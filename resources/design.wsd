@startuml tinyhttp
package team.aurorahub.learn.tinyhttp{

    package team.aurorahub.learn.tinyhttp.config{
        class tinyLocation {
            -settings : JSONObject
            +tinyLocation()
            +load(refMap : JSONObject) : void
            +check() : boolean
            +getPath() : String
            +setPath(path : String) : void
            +isAccessiable() : Boolean
            +setAccessible(accessiable : boolean) : void
            +getHandlerType() : int
            +setHandlerType(type : int) : void
            +getHandlerPath() : String
            +setHandlerPath(handlerPath : String) : void
        }

        class config{
            -configFilePath : String
            -customed : boolean
            -domain : String
            -port : int
            -root : String
            -redirect : boolean
            -redirectHost : String
            -redirectPort : String
            -paths : LinkedList<String>
            -locations : HashMap<String, tinyLocation>
            +config()
            +config(confPath : String)
            +getConfigFilePath() : String
            +getDomain() : String
            +setDomain(newDomain : String) : void
            +getPort() : int
            +setPort(newPort : int) : void
            +getPaths() : LinkedList<String>
            +getLocation(path : String) : tinyLocation
            +addLocation(newLocation : tinyLocation, newPath : String) : void
            +getRoot() : String
            +setRoot(newRoot : String) : void
            +isRedirect() : boolean
            +setRedirect(newRedirct : boolean) : void
        }

        config *-left-> tinyLocation
    }

    package team.aurorahub.learn.tinyhttp.model{
        class tinyHttpMsg{
            #contentLen : int
            #headerFields : HashMap<String, String>
            #tinyBody : ByteArrayOutputStream
            #inSocket : InputStream
            +tinyHttpMsg(newInput : InputStream)
            #{abstract}rebuildHeader() : String
            +{abstract}readAllBytesNow() : int
            +getContentLength() : int
            +getParam(key : String) : String
            +setParam(key : String, value : String) : String
            +sendTo(out : OutputStream) : int
            +transferTo(out : OutputStream) : int
            +getInputStream() : InputStream
        }

        class request{
            #tinyUri : String
            #tinyMethod : String
            #httpVer : String
            #queryParams : HashMap<String, String>
            #tinyQuery : String
            +Request(newIn : InputStream)
            +getUri() : String
            +getHttpMethod() : String
            +getHttpVer() : String
        }

        tinyHttpMsg <|-left- request

        class response{
            #httpVer : String
            #statusCode : int
            #codeParse : String
            #fromOuter : boolean
            +response(newInput : InputStream)
            +response(code : int)
            +writeBytes0(src : byte[], len : int) : int
            +print(msg : String) : response
            +println(msg : String) : response
            +loadFile(path : String) : response
        }

        tinyHttpMsg <|-- response
    }
    package team.aurorahub.learn.tinyhttp.handler{

        class handler{
            -setting : config
            -client : Socket
            +handler(myset : config, newSocket : Socket)
            -getLocation(uri : String) : String
            +run() : void
        }

        handler o-left-> config
        handler .right.> request
        handler ...> response
    }

    package team.aurorahub.learn.tinyhttp.core{
        class threadPoolManager{
            -maxCon : int
            -sSocket : ServerSocket
            -fixThreadPool ï¼šExecutorService
            +threadPoolManager(max : int)
            +run(myConf : config) : void
        }
        threadPoolManager ...> config
        threadPoolManager ...> handler

        class server{
            -manager : threadPoolManager
            -myConf : config
            +server(myConf : config) : void
            +run() : void
            +{static}main(args : String[]) : void
        }
        server *-right-> threadPoolManager
        server o--> config
    }

    package team.aurorahub.learn.tinyhttp.tinyUtils{
        class ioTools{
            +{static}CRLF : String
            +{static}BLANK : String
            +{static}readToString(confPath : String) : String
            +{static}tinyURLDecoding(url : String, encoding : String) : String
            +{static}tinyURLEncoding(url : String, encoding : String) : String
            +{static}tinyStrEncoding(msg String, encoding : String) : byte[]
            +{static}getContentType(target : File) : String
            +{static}formatURI(originURI : String) : String
            +{static}getURLParams(queryStr : String, KVs : HashMap<String, String>) : int
            +{static}getURIQuery(KVs : HashMap<String, String>) : String
        }

        class tinyLogger{
            -{static}logFile : String
            -{static}myLogger : Logger
            -{static}formatter : DateTimeFormatter
            -tinyLogger()
            +{static}setLogPath(path : String) : void
            +{static}getTinyLogger() : Logger
        }

        handler .down.> tinyLogger
        server .down.> tinyLogger
        threadPoolManager ...>tinyLogger

        class tinyLogFormat{
            -format(record : LogRecord) : String
        }

        tinyLogger+--tinyLogFormat
    }
    tinyLocation .down.> ioTools
    config .down.> ioTools
    response .up.> ioTools
    request .up.> ioTools
}
@enduml